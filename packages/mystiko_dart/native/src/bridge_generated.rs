#![allow(
    non_camel_case_types,
    unused,
    clippy::redundant_closure,
    clippy::useless_conversion,
    clippy::unit_arg,
    clippy::double_parens,
    non_snake_case,
    clippy::too_many_arguments
)]
// AUTO GENERATED FILE, DO NOT EDIT.
// Generated by `flutter_rust_bridge`@ 1.82.6.

use crate::api::*;
use core::panic::UnwindSafe;
use flutter_rust_bridge::rust2dart::IntoIntoDart;
use flutter_rust_bridge::*;
use std::ffi::c_void;
use std::sync::Arc;

// Section: imports

// Section: wire functions

fn wire_initialize_impl(port_: MessagePort, options: impl Wire2Api<Vec<u8>> + UnwindSafe) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, Vec<u8>, _>(
        WrapInfo {
            debug_name: "initialize",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_options = options.wire2api();
            move |task_callback| Result::<_, ()>::Ok(initialize(api_options))
        },
    )
}
fn wire_is_initialized_impl(port_: MessagePort) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, bool, _>(
        WrapInfo {
            debug_name: "is_initialized",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || move |task_callback| Result::<_, ()>::Ok(is_initialized()),
    )
}
fn wire_destroy_impl(port_: MessagePort) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, (), _>(
        WrapInfo {
            debug_name: "destroy",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || move |task_callback| Result::<_, ()>::Ok(destroy()),
    )
}
fn wire_get_config_impl(port_: MessagePort) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, Vec<u8>, _>(
        WrapInfo {
            debug_name: "get_config",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || move |task_callback| Result::<_, ()>::Ok(get_config()),
    )
}
fn wire_find_default_circuit_impl(
    port_: MessagePort,
    request: impl Wire2Api<Vec<u8>> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, Vec<u8>, _>(
        WrapInfo {
            debug_name: "find_default_circuit",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_request = request.wire2api();
            move |task_callback| Result::<_, ()>::Ok(find_default_circuit(api_request))
        },
    )
}
fn wire_find_circuit_impl(port_: MessagePort, request: impl Wire2Api<Vec<u8>> + UnwindSafe) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, Vec<u8>, _>(
        WrapInfo {
            debug_name: "find_circuit",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_request = request.wire2api();
            move |task_callback| Result::<_, ()>::Ok(find_circuit(api_request))
        },
    )
}
fn wire_find_chain_impl(port_: MessagePort, request: impl Wire2Api<Vec<u8>> + UnwindSafe) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, Vec<u8>, _>(
        WrapInfo {
            debug_name: "find_chain",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_request = request.wire2api();
            move |task_callback| Result::<_, ()>::Ok(find_chain(api_request))
        },
    )
}
fn wire_find_peer_chains_impl(port_: MessagePort, request: impl Wire2Api<Vec<u8>> + UnwindSafe) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, Vec<u8>, _>(
        WrapInfo {
            debug_name: "find_peer_chains",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_request = request.wire2api();
            move |task_callback| Result::<_, ()>::Ok(find_peer_chains(api_request))
        },
    )
}
fn wire_find_asset_symbols_impl(port_: MessagePort, request: impl Wire2Api<Vec<u8>> + UnwindSafe) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, Vec<u8>, _>(
        WrapInfo {
            debug_name: "find_asset_symbols",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_request = request.wire2api();
            move |task_callback| Result::<_, ()>::Ok(find_asset_symbols(api_request))
        },
    )
}
fn wire_find_bridge_impl(port_: MessagePort, request: impl Wire2Api<Vec<u8>> + UnwindSafe) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, Vec<u8>, _>(
        WrapInfo {
            debug_name: "find_bridge",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_request = request.wire2api();
            move |task_callback| Result::<_, ()>::Ok(find_bridge(api_request))
        },
    )
}
fn wire_find_bridges_impl(port_: MessagePort, request: impl Wire2Api<Vec<u8>> + UnwindSafe) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, Vec<u8>, _>(
        WrapInfo {
            debug_name: "find_bridges",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_request = request.wire2api();
            move |task_callback| Result::<_, ()>::Ok(find_bridges(api_request))
        },
    )
}
fn wire_find_deposit_contract_impl(
    port_: MessagePort,
    request: impl Wire2Api<Vec<u8>> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, Vec<u8>, _>(
        WrapInfo {
            debug_name: "find_deposit_contract",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_request = request.wire2api();
            move |task_callback| Result::<_, ()>::Ok(find_deposit_contract(api_request))
        },
    )
}
fn wire_find_deposit_contract_by_address_impl(
    port_: MessagePort,
    request: impl Wire2Api<Vec<u8>> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, Vec<u8>, _>(
        WrapInfo {
            debug_name: "find_deposit_contract_by_address",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_request = request.wire2api();
            move |task_callback| Result::<_, ()>::Ok(find_deposit_contract_by_address(api_request))
        },
    )
}
fn wire_find_pool_contract_impl(port_: MessagePort, request: impl Wire2Api<Vec<u8>> + UnwindSafe) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, Vec<u8>, _>(
        WrapInfo {
            debug_name: "find_pool_contract",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_request = request.wire2api();
            move |task_callback| Result::<_, ()>::Ok(find_pool_contract(api_request))
        },
    )
}
fn wire_find_pool_contracts_impl(port_: MessagePort, request: impl Wire2Api<Vec<u8>> + UnwindSafe) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, Vec<u8>, _>(
        WrapInfo {
            debug_name: "find_pool_contracts",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_request = request.wire2api();
            move |task_callback| Result::<_, ()>::Ok(find_pool_contracts(api_request))
        },
    )
}
fn wire_find_pool_contract_by_address_impl(
    port_: MessagePort,
    request: impl Wire2Api<Vec<u8>> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, Vec<u8>, _>(
        WrapInfo {
            debug_name: "find_pool_contract_by_address",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_request = request.wire2api();
            move |task_callback| Result::<_, ()>::Ok(find_pool_contract_by_address(api_request))
        },
    )
}
fn wire_find_contract_by_address_impl(
    port_: MessagePort,
    request: impl Wire2Api<Vec<u8>> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, Vec<u8>, _>(
        WrapInfo {
            debug_name: "find_contract_by_address",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_request = request.wire2api();
            move |task_callback| Result::<_, ()>::Ok(find_contract_by_address(api_request))
        },
    )
}
fn wire_get_transaction_url_impl(port_: MessagePort, request: impl Wire2Api<Vec<u8>> + UnwindSafe) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, Vec<u8>, _>(
        WrapInfo {
            debug_name: "get_transaction_url",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_request = request.wire2api();
            move |task_callback| Result::<_, ()>::Ok(get_transaction_url(api_request))
        },
    )
}
fn wire_supported_asset_symbols_impl(
    port_: MessagePort,
    request: impl Wire2Api<Vec<u8>> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, Vec<u8>, _>(
        WrapInfo {
            debug_name: "supported_asset_symbols",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_request = request.wire2api();
            move |task_callback| Result::<_, ()>::Ok(supported_asset_symbols(api_request))
        },
    )
}
fn wire_create_account_impl(port_: MessagePort, request: impl Wire2Api<Vec<u8>> + UnwindSafe) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, Vec<u8>, _>(
        WrapInfo {
            debug_name: "create_account",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_request = request.wire2api();
            move |task_callback| Result::<_, ()>::Ok(create_account(api_request))
        },
    )
}
fn wire_count_impl(port_: MessagePort, request: impl Wire2Api<Vec<u8>> + UnwindSafe) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, Vec<u8>, _>(
        WrapInfo {
            debug_name: "count",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_request = request.wire2api();
            move |task_callback| Result::<_, ()>::Ok(count(api_request))
        },
    )
}
fn wire_count_all_impl(port_: MessagePort) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, Vec<u8>, _>(
        WrapInfo {
            debug_name: "count_all",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || move |task_callback| Result::<_, ()>::Ok(count_all()),
    )
}
fn wire_find_impl(port_: MessagePort, request: impl Wire2Api<Vec<u8>> + UnwindSafe) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, Vec<u8>, _>(
        WrapInfo {
            debug_name: "find",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_request = request.wire2api();
            move |task_callback| Result::<_, ()>::Ok(find(api_request))
        },
    )
}
fn wire_find_by_id_impl(port_: MessagePort, request: impl Wire2Api<Vec<u8>> + UnwindSafe) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, Vec<u8>, _>(
        WrapInfo {
            debug_name: "find_by_id",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_request = request.wire2api();
            move |task_callback| Result::<_, ()>::Ok(find_by_id(api_request))
        },
    )
}
fn wire_find_by_shielded_address_impl(
    port_: MessagePort,
    request: impl Wire2Api<Vec<u8>> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, Vec<u8>, _>(
        WrapInfo {
            debug_name: "find_by_shielded_address",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_request = request.wire2api();
            move |task_callback| Result::<_, ()>::Ok(find_by_shielded_address(api_request))
        },
    )
}
fn wire_find_by_public_key_impl(port_: MessagePort, request: impl Wire2Api<Vec<u8>> + UnwindSafe) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, Vec<u8>, _>(
        WrapInfo {
            debug_name: "find_by_public_key",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_request = request.wire2api();
            move |task_callback| Result::<_, ()>::Ok(find_by_public_key(api_request))
        },
    )
}
fn wire_update_by_id_impl(port_: MessagePort, request: impl Wire2Api<Vec<u8>> + UnwindSafe) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, Vec<u8>, _>(
        WrapInfo {
            debug_name: "update_by_id",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_request = request.wire2api();
            move |task_callback| Result::<_, ()>::Ok(update_by_id(api_request))
        },
    )
}
fn wire_update_by_shielded_address_impl(
    port_: MessagePort,
    request: impl Wire2Api<Vec<u8>> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, Vec<u8>, _>(
        WrapInfo {
            debug_name: "update_by_shielded_address",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_request = request.wire2api();
            move |task_callback| Result::<_, ()>::Ok(update_by_shielded_address(api_request))
        },
    )
}
fn wire_update_by_public_key_impl(
    port_: MessagePort,
    request: impl Wire2Api<Vec<u8>> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, Vec<u8>, _>(
        WrapInfo {
            debug_name: "update_by_public_key",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_request = request.wire2api();
            move |task_callback| Result::<_, ()>::Ok(update_by_public_key(api_request))
        },
    )
}
fn wire_update_encryption_impl(port_: MessagePort, request: impl Wire2Api<Vec<u8>> + UnwindSafe) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, Vec<u8>, _>(
        WrapInfo {
            debug_name: "update_encryption",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_request = request.wire2api();
            move |task_callback| Result::<_, ()>::Ok(update_encryption(api_request))
        },
    )
}
fn wire_export_secret_key_by_id_impl(
    port_: MessagePort,
    request: impl Wire2Api<Vec<u8>> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, Vec<u8>, _>(
        WrapInfo {
            debug_name: "export_secret_key_by_id",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_request = request.wire2api();
            move |task_callback| Result::<_, ()>::Ok(export_secret_key_by_id(api_request))
        },
    )
}
fn wire_export_secret_key_by_shielded_address_impl(
    port_: MessagePort,
    request: impl Wire2Api<Vec<u8>> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, Vec<u8>, _>(
        WrapInfo {
            debug_name: "export_secret_key_by_shielded_address",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_request = request.wire2api();
            move |task_callback| {
                Result::<_, ()>::Ok(export_secret_key_by_shielded_address(api_request))
            }
        },
    )
}
fn wire_export_secret_key_by_public_key_impl(
    port_: MessagePort,
    request: impl Wire2Api<Vec<u8>> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, Vec<u8>, _>(
        WrapInfo {
            debug_name: "export_secret_key_by_public_key",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_request = request.wire2api();
            move |task_callback| Result::<_, ()>::Ok(export_secret_key_by_public_key(api_request))
        },
    )
}
fn wire_quote_deposit_impl(port_: MessagePort, request: impl Wire2Api<Vec<u8>> + UnwindSafe) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, Vec<u8>, _>(
        WrapInfo {
            debug_name: "quote_deposit",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_request = request.wire2api();
            move |task_callback| Result::<_, ()>::Ok(quote_deposit(api_request))
        },
    )
}
fn wire_summary_deposit_impl(port_: MessagePort, request: impl Wire2Api<Vec<u8>> + UnwindSafe) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, Vec<u8>, _>(
        WrapInfo {
            debug_name: "summary_deposit",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_request = request.wire2api();
            move |task_callback| Result::<_, ()>::Ok(summary_deposit(api_request))
        },
    )
}
fn wire_create_deposit_impl(port_: MessagePort, request: impl Wire2Api<Vec<u8>> + UnwindSafe) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, Vec<u8>, _>(
        WrapInfo {
            debug_name: "create_deposit",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_request = request.wire2api();
            move |task_callback| Result::<_, ()>::Ok(create_deposit(api_request))
        },
    )
}
fn wire_send_deposit_impl(port_: MessagePort, request: impl Wire2Api<Vec<u8>> + UnwindSafe) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, Vec<u8>, _>(
        WrapInfo {
            debug_name: "send_deposit",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_request = request.wire2api();
            move |task_callback| Result::<_, ()>::Ok(send_deposit(api_request))
        },
    )
}
fn wire_send_deposit_with_grpc_impl(
    port_: MessagePort,
    request: impl Wire2Api<Vec<u8>> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, Vec<u8>, _>(
        WrapInfo {
            debug_name: "send_deposit_with_grpc",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_request = request.wire2api();
            move |task_callback| Result::<_, ()>::Ok(send_deposit_with_grpc(api_request))
        },
    )
}
fn wire_find_deposit_impl(port_: MessagePort, request: impl Wire2Api<Vec<u8>> + UnwindSafe) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, Vec<u8>, _>(
        WrapInfo {
            debug_name: "find_deposit",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_request = request.wire2api();
            move |task_callback| Result::<_, ()>::Ok(find_deposit(api_request))
        },
    )
}
fn wire_find_all_deposit_impl(port_: MessagePort) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, Vec<u8>, _>(
        WrapInfo {
            debug_name: "find_all_deposit",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || move |task_callback| Result::<_, ()>::Ok(find_all_deposit()),
    )
}
fn wire_find_one_deposit_impl(port_: MessagePort, request: impl Wire2Api<Vec<u8>> + UnwindSafe) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, Vec<u8>, _>(
        WrapInfo {
            debug_name: "find_one_deposit",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_request = request.wire2api();
            move |task_callback| Result::<_, ()>::Ok(find_one_deposit(api_request))
        },
    )
}
fn wire_deposit_find_by_id_impl(port_: MessagePort, request: impl Wire2Api<Vec<u8>> + UnwindSafe) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, Vec<u8>, _>(
        WrapInfo {
            debug_name: "deposit_find_by_id",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_request = request.wire2api();
            move |task_callback| Result::<_, ()>::Ok(deposit_find_by_id(api_request))
        },
    )
}
fn wire_count_deposit_impl(port_: MessagePort, request: impl Wire2Api<Vec<u8>> + UnwindSafe) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, Vec<u8>, _>(
        WrapInfo {
            debug_name: "count_deposit",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_request = request.wire2api();
            move |task_callback| Result::<_, ()>::Ok(count_deposit(api_request))
        },
    )
}
fn wire_count_all_deposit_impl(port_: MessagePort) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, Vec<u8>, _>(
        WrapInfo {
            debug_name: "count_all_deposit",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || move |task_callback| Result::<_, ()>::Ok(count_all_deposit()),
    )
}
fn wire_deposit_update_impl(port_: MessagePort, request: impl Wire2Api<Vec<u8>> + UnwindSafe) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, Vec<u8>, _>(
        WrapInfo {
            debug_name: "deposit_update",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_request = request.wire2api();
            move |task_callback| Result::<_, ()>::Ok(deposit_update(api_request))
        },
    )
}
fn wire_deposit_update_batch_impl(
    port_: MessagePort,
    request: impl Wire2Api<Vec<u8>> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, Vec<u8>, _>(
        WrapInfo {
            debug_name: "deposit_update_batch",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_request = request.wire2api();
            move |task_callback| Result::<_, ()>::Ok(deposit_update_batch(api_request))
        },
    )
}
fn wire_deposit_update_by_filter_impl(
    port_: MessagePort,
    request: impl Wire2Api<Vec<u8>> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, Vec<u8>, _>(
        WrapInfo {
            debug_name: "deposit_update_by_filter",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_request = request.wire2api();
            move |task_callback| Result::<_, ()>::Ok(deposit_update_by_filter(api_request))
        },
    )
}
fn wire_deposit_update_all_impl(port_: MessagePort, request: impl Wire2Api<Vec<u8>> + UnwindSafe) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, Vec<u8>, _>(
        WrapInfo {
            debug_name: "deposit_update_all",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_request = request.wire2api();
            move |task_callback| Result::<_, ()>::Ok(deposit_update_all(api_request))
        },
    )
}
fn wire_deposit_delete_impl(port_: MessagePort, request: impl Wire2Api<Vec<u8>> + UnwindSafe) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, Vec<u8>, _>(
        WrapInfo {
            debug_name: "deposit_delete",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_request = request.wire2api();
            move |task_callback| Result::<_, ()>::Ok(deposit_delete(api_request))
        },
    )
}
fn wire_deposit_delete_batch_impl(
    port_: MessagePort,
    request: impl Wire2Api<Vec<u8>> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, Vec<u8>, _>(
        WrapInfo {
            debug_name: "deposit_delete_batch",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_request = request.wire2api();
            move |task_callback| Result::<_, ()>::Ok(deposit_delete_batch(api_request))
        },
    )
}
fn wire_deposit_delete_by_filter_impl(
    port_: MessagePort,
    request: impl Wire2Api<Vec<u8>> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, Vec<u8>, _>(
        WrapInfo {
            debug_name: "deposit_delete_by_filter",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_request = request.wire2api();
            move |task_callback| Result::<_, ()>::Ok(deposit_delete_by_filter(api_request))
        },
    )
}
fn wire_deposit_delete_all_impl(port_: MessagePort) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, Vec<u8>, _>(
        WrapInfo {
            debug_name: "deposit_delete_all",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || move |task_callback| Result::<_, ()>::Ok(deposit_delete_all()),
    )
}
fn wire_scanner_scan_impl(port_: MessagePort, request: impl Wire2Api<Vec<u8>> + UnwindSafe) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, Vec<u8>, _>(
        WrapInfo {
            debug_name: "scanner_scan",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_request = request.wire2api();
            move |task_callback| Result::<_, ()>::Ok(scanner_scan(api_request))
        },
    )
}
fn wire_scanner_reset_impl(port_: MessagePort, request: impl Wire2Api<Vec<u8>> + UnwindSafe) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, Vec<u8>, _>(
        WrapInfo {
            debug_name: "scanner_reset",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_request = request.wire2api();
            move |task_callback| Result::<_, ()>::Ok(scanner_reset(api_request))
        },
    )
}
fn wire_balance_impl(port_: MessagePort, request: impl Wire2Api<Vec<u8>> + UnwindSafe) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, Vec<u8>, _>(
        WrapInfo {
            debug_name: "balance",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_request = request.wire2api();
            move |task_callback| Result::<_, ()>::Ok(balance(api_request))
        },
    )
}
fn wire_assets_impl(port_: MessagePort, request: impl Wire2Api<Vec<u8>> + UnwindSafe) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, Vec<u8>, _>(
        WrapInfo {
            debug_name: "assets",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_request = request.wire2api();
            move |task_callback| Result::<_, ()>::Ok(assets(api_request))
        },
    )
}
fn wire_chain_assets_impl(port_: MessagePort, request: impl Wire2Api<Vec<u8>> + UnwindSafe) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, Vec<u8>, _>(
        WrapInfo {
            debug_name: "chain_assets",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_request = request.wire2api();
            move |task_callback| Result::<_, ()>::Ok(chain_assets(api_request))
        },
    )
}
fn wire_assets_import_impl(port_: MessagePort, request: impl Wire2Api<Vec<u8>> + UnwindSafe) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, Vec<u8>, _>(
        WrapInfo {
            debug_name: "assets_import",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_request = request.wire2api();
            move |task_callback| Result::<_, ()>::Ok(assets_import(api_request))
        },
    )
}
fn wire_quote_spend_impl(port_: MessagePort, request: impl Wire2Api<Vec<u8>> + UnwindSafe) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, Vec<u8>, _>(
        WrapInfo {
            debug_name: "quote_spend",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_request = request.wire2api();
            move |task_callback| Result::<_, ()>::Ok(quote_spend(api_request))
        },
    )
}
fn wire_summary_spend_impl(port_: MessagePort, request: impl Wire2Api<Vec<u8>> + UnwindSafe) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, Vec<u8>, _>(
        WrapInfo {
            debug_name: "summary_spend",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_request = request.wire2api();
            move |task_callback| Result::<_, ()>::Ok(summary_spend(api_request))
        },
    )
}
fn wire_create_spend_impl(port_: MessagePort, request: impl Wire2Api<Vec<u8>> + UnwindSafe) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, Vec<u8>, _>(
        WrapInfo {
            debug_name: "create_spend",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_request = request.wire2api();
            move |task_callback| Result::<_, ()>::Ok(create_spend(api_request))
        },
    )
}
fn wire_send_spend_impl(port_: MessagePort, request: impl Wire2Api<Vec<u8>> + UnwindSafe) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, Vec<u8>, _>(
        WrapInfo {
            debug_name: "send_spend",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_request = request.wire2api();
            move |task_callback| Result::<_, ()>::Ok(send_spend(api_request))
        },
    )
}
fn wire_send_spend_with_grpc_impl(
    port_: MessagePort,
    request: impl Wire2Api<Vec<u8>> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, Vec<u8>, _>(
        WrapInfo {
            debug_name: "send_spend_with_grpc",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_request = request.wire2api();
            move |task_callback| Result::<_, ()>::Ok(send_spend_with_grpc(api_request))
        },
    )
}
fn wire_find_spend_impl(port_: MessagePort, request: impl Wire2Api<Vec<u8>> + UnwindSafe) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, Vec<u8>, _>(
        WrapInfo {
            debug_name: "find_spend",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_request = request.wire2api();
            move |task_callback| Result::<_, ()>::Ok(find_spend(api_request))
        },
    )
}
fn wire_find_all_spend_impl(port_: MessagePort) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, Vec<u8>, _>(
        WrapInfo {
            debug_name: "find_all_spend",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || move |task_callback| Result::<_, ()>::Ok(find_all_spend()),
    )
}
fn wire_find_one_spend_impl(port_: MessagePort, request: impl Wire2Api<Vec<u8>> + UnwindSafe) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, Vec<u8>, _>(
        WrapInfo {
            debug_name: "find_one_spend",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_request = request.wire2api();
            move |task_callback| Result::<_, ()>::Ok(find_one_spend(api_request))
        },
    )
}
fn wire_spend_find_by_id_impl(port_: MessagePort, request: impl Wire2Api<Vec<u8>> + UnwindSafe) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, Vec<u8>, _>(
        WrapInfo {
            debug_name: "spend_find_by_id",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_request = request.wire2api();
            move |task_callback| Result::<_, ()>::Ok(spend_find_by_id(api_request))
        },
    )
}
fn wire_count_spend_impl(port_: MessagePort, request: impl Wire2Api<Vec<u8>> + UnwindSafe) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, Vec<u8>, _>(
        WrapInfo {
            debug_name: "count_spend",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_request = request.wire2api();
            move |task_callback| Result::<_, ()>::Ok(count_spend(api_request))
        },
    )
}
fn wire_count_all_spend_impl(port_: MessagePort) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, Vec<u8>, _>(
        WrapInfo {
            debug_name: "count_all_spend",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || move |task_callback| Result::<_, ()>::Ok(count_all_spend()),
    )
}
fn wire_spend_update_impl(port_: MessagePort, request: impl Wire2Api<Vec<u8>> + UnwindSafe) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, Vec<u8>, _>(
        WrapInfo {
            debug_name: "spend_update",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_request = request.wire2api();
            move |task_callback| Result::<_, ()>::Ok(spend_update(api_request))
        },
    )
}
fn wire_spend_update_batch_impl(port_: MessagePort, request: impl Wire2Api<Vec<u8>> + UnwindSafe) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, Vec<u8>, _>(
        WrapInfo {
            debug_name: "spend_update_batch",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_request = request.wire2api();
            move |task_callback| Result::<_, ()>::Ok(spend_update_batch(api_request))
        },
    )
}
fn wire_spend_update_by_filter_impl(
    port_: MessagePort,
    request: impl Wire2Api<Vec<u8>> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, Vec<u8>, _>(
        WrapInfo {
            debug_name: "spend_update_by_filter",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_request = request.wire2api();
            move |task_callback| Result::<_, ()>::Ok(spend_update_by_filter(api_request))
        },
    )
}
fn wire_spend_update_all_impl(port_: MessagePort, request: impl Wire2Api<Vec<u8>> + UnwindSafe) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, Vec<u8>, _>(
        WrapInfo {
            debug_name: "spend_update_all",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_request = request.wire2api();
            move |task_callback| Result::<_, ()>::Ok(spend_update_all(api_request))
        },
    )
}
fn wire_spend_delete_impl(port_: MessagePort, request: impl Wire2Api<Vec<u8>> + UnwindSafe) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, Vec<u8>, _>(
        WrapInfo {
            debug_name: "spend_delete",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_request = request.wire2api();
            move |task_callback| Result::<_, ()>::Ok(spend_delete(api_request))
        },
    )
}
fn wire_spend_delete_batch_impl(port_: MessagePort, request: impl Wire2Api<Vec<u8>> + UnwindSafe) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, Vec<u8>, _>(
        WrapInfo {
            debug_name: "spend_delete_batch",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_request = request.wire2api();
            move |task_callback| Result::<_, ()>::Ok(spend_delete_batch(api_request))
        },
    )
}
fn wire_spend_delete_by_filter_impl(
    port_: MessagePort,
    request: impl Wire2Api<Vec<u8>> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, Vec<u8>, _>(
        WrapInfo {
            debug_name: "spend_delete_by_filter",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_request = request.wire2api();
            move |task_callback| Result::<_, ()>::Ok(spend_delete_by_filter(api_request))
        },
    )
}
fn wire_spend_delete_all_impl(port_: MessagePort) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, Vec<u8>, _>(
        WrapInfo {
            debug_name: "spend_delete_all",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || move |task_callback| Result::<_, ()>::Ok(spend_delete_all()),
    )
}
fn wire_chain_synced_block_impl(port_: MessagePort, request: impl Wire2Api<Vec<u8>> + UnwindSafe) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, Vec<u8>, _>(
        WrapInfo {
            debug_name: "chain_synced_block",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_request = request.wire2api();
            move |task_callback| Result::<_, ()>::Ok(chain_synced_block(api_request))
        },
    )
}
fn wire_contract_synced_block_impl(
    port_: MessagePort,
    request: impl Wire2Api<Vec<u8>> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, Vec<u8>, _>(
        WrapInfo {
            debug_name: "contract_synced_block",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_request = request.wire2api();
            move |task_callback| Result::<_, ()>::Ok(contract_synced_block(api_request))
        },
    )
}
fn wire_status_impl(port_: MessagePort, request: impl Wire2Api<Vec<u8>> + UnwindSafe) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, Vec<u8>, _>(
        WrapInfo {
            debug_name: "status",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_request = request.wire2api();
            move |task_callback| Result::<_, ()>::Ok(status(api_request))
        },
    )
}
fn wire_synchronizer_sync_impl(port_: MessagePort, request: impl Wire2Api<Vec<u8>> + UnwindSafe) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, Vec<u8>, _>(
        WrapInfo {
            debug_name: "synchronizer_sync",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_request = request.wire2api();
            move |task_callback| Result::<_, ()>::Ok(synchronizer_sync(api_request))
        },
    )
}
fn wire_synchronizer_reset_impl(port_: MessagePort, request: impl Wire2Api<Vec<u8>> + UnwindSafe) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, Vec<u8>, _>(
        WrapInfo {
            debug_name: "synchronizer_reset",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_request = request.wire2api();
            move |task_callback| Result::<_, ()>::Ok(synchronizer_reset(api_request))
        },
    )
}
fn wire_create_wallet_impl(port_: MessagePort, request: impl Wire2Api<Vec<u8>> + UnwindSafe) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, Vec<u8>, _>(
        WrapInfo {
            debug_name: "create_wallet",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_request = request.wire2api();
            move |task_callback| Result::<_, ()>::Ok(create_wallet(api_request))
        },
    )
}
fn wire_check_current_impl(port_: MessagePort) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, Vec<u8>, _>(
        WrapInfo {
            debug_name: "check_current",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || move |task_callback| Result::<_, ()>::Ok(check_current()),
    )
}
fn wire_check_password_impl(port_: MessagePort, request: impl Wire2Api<Vec<u8>> + UnwindSafe) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, Vec<u8>, _>(
        WrapInfo {
            debug_name: "check_password",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_request = request.wire2api();
            move |task_callback| Result::<_, ()>::Ok(check_password(api_request))
        },
    )
}
fn wire_update_password_impl(port_: MessagePort, request: impl Wire2Api<Vec<u8>> + UnwindSafe) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, Vec<u8>, _>(
        WrapInfo {
            debug_name: "update_password",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_request = request.wire2api();
            move |task_callback| Result::<_, ()>::Ok(update_password(api_request))
        },
    )
}
fn wire_export_mnemonic_phrase_impl(
    port_: MessagePort,
    request: impl Wire2Api<Vec<u8>> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, Vec<u8>, _>(
        WrapInfo {
            debug_name: "export_mnemonic_phrase",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_request = request.wire2api();
            move |task_callback| Result::<_, ()>::Ok(export_mnemonic_phrase(api_request))
        },
    )
}
// Section: wrapper structs

// Section: static checks

// Section: allocate functions

// Section: related functions

// Section: impl Wire2Api

pub trait Wire2Api<T> {
    fn wire2api(self) -> T;
}

impl<T, S> Wire2Api<Option<T>> for *mut S
where
    *mut S: Wire2Api<T>,
{
    fn wire2api(self) -> Option<T> {
        (!self.is_null()).then(|| self.wire2api())
    }
}
impl Wire2Api<u8> for u8 {
    fn wire2api(self) -> u8 {
        self
    }
}

// Section: impl IntoDart

// Section: executor

support::lazy_static! {
    pub static ref FLUTTER_RUST_BRIDGE_HANDLER: support::DefaultHandler = Default::default();
}

/// cbindgen:ignore
#[cfg(target_family = "wasm")]
mod web {
    use super::*;
    // Section: wire functions

    #[wasm_bindgen]
    pub fn wire_initialize(port_: MessagePort, options: Box<[u8]>) {
        wire_initialize_impl(port_, options)
    }

    #[wasm_bindgen]
    pub fn wire_is_initialized(port_: MessagePort) {
        wire_is_initialized_impl(port_)
    }

    #[wasm_bindgen]
    pub fn wire_destroy(port_: MessagePort) {
        wire_destroy_impl(port_)
    }

    #[wasm_bindgen]
    pub fn wire_get_config(port_: MessagePort) {
        wire_get_config_impl(port_)
    }

    #[wasm_bindgen]
    pub fn wire_find_default_circuit(port_: MessagePort, request: Box<[u8]>) {
        wire_find_default_circuit_impl(port_, request)
    }

    #[wasm_bindgen]
    pub fn wire_find_circuit(port_: MessagePort, request: Box<[u8]>) {
        wire_find_circuit_impl(port_, request)
    }

    #[wasm_bindgen]
    pub fn wire_find_chain(port_: MessagePort, request: Box<[u8]>) {
        wire_find_chain_impl(port_, request)
    }

    #[wasm_bindgen]
    pub fn wire_find_peer_chains(port_: MessagePort, request: Box<[u8]>) {
        wire_find_peer_chains_impl(port_, request)
    }

    #[wasm_bindgen]
    pub fn wire_find_asset_symbols(port_: MessagePort, request: Box<[u8]>) {
        wire_find_asset_symbols_impl(port_, request)
    }

    #[wasm_bindgen]
    pub fn wire_find_bridge(port_: MessagePort, request: Box<[u8]>) {
        wire_find_bridge_impl(port_, request)
    }

    #[wasm_bindgen]
    pub fn wire_find_bridges(port_: MessagePort, request: Box<[u8]>) {
        wire_find_bridges_impl(port_, request)
    }

    #[wasm_bindgen]
    pub fn wire_find_deposit_contract(port_: MessagePort, request: Box<[u8]>) {
        wire_find_deposit_contract_impl(port_, request)
    }

    #[wasm_bindgen]
    pub fn wire_find_deposit_contract_by_address(port_: MessagePort, request: Box<[u8]>) {
        wire_find_deposit_contract_by_address_impl(port_, request)
    }

    #[wasm_bindgen]
    pub fn wire_find_pool_contract(port_: MessagePort, request: Box<[u8]>) {
        wire_find_pool_contract_impl(port_, request)
    }

    #[wasm_bindgen]
    pub fn wire_find_pool_contracts(port_: MessagePort, request: Box<[u8]>) {
        wire_find_pool_contracts_impl(port_, request)
    }

    #[wasm_bindgen]
    pub fn wire_find_pool_contract_by_address(port_: MessagePort, request: Box<[u8]>) {
        wire_find_pool_contract_by_address_impl(port_, request)
    }

    #[wasm_bindgen]
    pub fn wire_find_contract_by_address(port_: MessagePort, request: Box<[u8]>) {
        wire_find_contract_by_address_impl(port_, request)
    }

    #[wasm_bindgen]
    pub fn wire_get_transaction_url(port_: MessagePort, request: Box<[u8]>) {
        wire_get_transaction_url_impl(port_, request)
    }

    #[wasm_bindgen]
    pub fn wire_supported_asset_symbols(port_: MessagePort, request: Box<[u8]>) {
        wire_supported_asset_symbols_impl(port_, request)
    }

    #[wasm_bindgen]
    pub fn wire_create_account(port_: MessagePort, request: Box<[u8]>) {
        wire_create_account_impl(port_, request)
    }

    #[wasm_bindgen]
    pub fn wire_count(port_: MessagePort, request: Box<[u8]>) {
        wire_count_impl(port_, request)
    }

    #[wasm_bindgen]
    pub fn wire_count_all(port_: MessagePort) {
        wire_count_all_impl(port_)
    }

    #[wasm_bindgen]
    pub fn wire_find(port_: MessagePort, request: Box<[u8]>) {
        wire_find_impl(port_, request)
    }

    #[wasm_bindgen]
    pub fn wire_find_by_id(port_: MessagePort, request: Box<[u8]>) {
        wire_find_by_id_impl(port_, request)
    }

    #[wasm_bindgen]
    pub fn wire_find_by_shielded_address(port_: MessagePort, request: Box<[u8]>) {
        wire_find_by_shielded_address_impl(port_, request)
    }

    #[wasm_bindgen]
    pub fn wire_find_by_public_key(port_: MessagePort, request: Box<[u8]>) {
        wire_find_by_public_key_impl(port_, request)
    }

    #[wasm_bindgen]
    pub fn wire_update_by_id(port_: MessagePort, request: Box<[u8]>) {
        wire_update_by_id_impl(port_, request)
    }

    #[wasm_bindgen]
    pub fn wire_update_by_shielded_address(port_: MessagePort, request: Box<[u8]>) {
        wire_update_by_shielded_address_impl(port_, request)
    }

    #[wasm_bindgen]
    pub fn wire_update_by_public_key(port_: MessagePort, request: Box<[u8]>) {
        wire_update_by_public_key_impl(port_, request)
    }

    #[wasm_bindgen]
    pub fn wire_update_encryption(port_: MessagePort, request: Box<[u8]>) {
        wire_update_encryption_impl(port_, request)
    }

    #[wasm_bindgen]
    pub fn wire_export_secret_key_by_id(port_: MessagePort, request: Box<[u8]>) {
        wire_export_secret_key_by_id_impl(port_, request)
    }

    #[wasm_bindgen]
    pub fn wire_export_secret_key_by_shielded_address(port_: MessagePort, request: Box<[u8]>) {
        wire_export_secret_key_by_shielded_address_impl(port_, request)
    }

    #[wasm_bindgen]
    pub fn wire_export_secret_key_by_public_key(port_: MessagePort, request: Box<[u8]>) {
        wire_export_secret_key_by_public_key_impl(port_, request)
    }

    #[wasm_bindgen]
    pub fn wire_quote_deposit(port_: MessagePort, request: Box<[u8]>) {
        wire_quote_deposit_impl(port_, request)
    }

    #[wasm_bindgen]
    pub fn wire_summary_deposit(port_: MessagePort, request: Box<[u8]>) {
        wire_summary_deposit_impl(port_, request)
    }

    #[wasm_bindgen]
    pub fn wire_create_deposit(port_: MessagePort, request: Box<[u8]>) {
        wire_create_deposit_impl(port_, request)
    }

    #[wasm_bindgen]
    pub fn wire_send_deposit(port_: MessagePort, request: Box<[u8]>) {
        wire_send_deposit_impl(port_, request)
    }

    #[wasm_bindgen]
    pub fn wire_send_deposit_with_grpc(port_: MessagePort, request: Box<[u8]>) {
        wire_send_deposit_with_grpc_impl(port_, request)
    }

    #[wasm_bindgen]
    pub fn wire_find_deposit(port_: MessagePort, request: Box<[u8]>) {
        wire_find_deposit_impl(port_, request)
    }

    #[wasm_bindgen]
    pub fn wire_find_all_deposit(port_: MessagePort) {
        wire_find_all_deposit_impl(port_)
    }

    #[wasm_bindgen]
    pub fn wire_find_one_deposit(port_: MessagePort, request: Box<[u8]>) {
        wire_find_one_deposit_impl(port_, request)
    }

    #[wasm_bindgen]
    pub fn wire_deposit_find_by_id(port_: MessagePort, request: Box<[u8]>) {
        wire_deposit_find_by_id_impl(port_, request)
    }

    #[wasm_bindgen]
    pub fn wire_count_deposit(port_: MessagePort, request: Box<[u8]>) {
        wire_count_deposit_impl(port_, request)
    }

    #[wasm_bindgen]
    pub fn wire_count_all_deposit(port_: MessagePort) {
        wire_count_all_deposit_impl(port_)
    }

    #[wasm_bindgen]
    pub fn wire_deposit_update(port_: MessagePort, request: Box<[u8]>) {
        wire_deposit_update_impl(port_, request)
    }

    #[wasm_bindgen]
    pub fn wire_deposit_update_batch(port_: MessagePort, request: Box<[u8]>) {
        wire_deposit_update_batch_impl(port_, request)
    }

    #[wasm_bindgen]
    pub fn wire_deposit_update_by_filter(port_: MessagePort, request: Box<[u8]>) {
        wire_deposit_update_by_filter_impl(port_, request)
    }

    #[wasm_bindgen]
    pub fn wire_deposit_update_all(port_: MessagePort, request: Box<[u8]>) {
        wire_deposit_update_all_impl(port_, request)
    }

    #[wasm_bindgen]
    pub fn wire_deposit_delete(port_: MessagePort, request: Box<[u8]>) {
        wire_deposit_delete_impl(port_, request)
    }

    #[wasm_bindgen]
    pub fn wire_deposit_delete_batch(port_: MessagePort, request: Box<[u8]>) {
        wire_deposit_delete_batch_impl(port_, request)
    }

    #[wasm_bindgen]
    pub fn wire_deposit_delete_by_filter(port_: MessagePort, request: Box<[u8]>) {
        wire_deposit_delete_by_filter_impl(port_, request)
    }

    #[wasm_bindgen]
    pub fn wire_deposit_delete_all(port_: MessagePort) {
        wire_deposit_delete_all_impl(port_)
    }

    #[wasm_bindgen]
    pub fn wire_scanner_scan(port_: MessagePort, request: Box<[u8]>) {
        wire_scanner_scan_impl(port_, request)
    }

    #[wasm_bindgen]
    pub fn wire_scanner_reset(port_: MessagePort, request: Box<[u8]>) {
        wire_scanner_reset_impl(port_, request)
    }

    #[wasm_bindgen]
    pub fn wire_balance(port_: MessagePort, request: Box<[u8]>) {
        wire_balance_impl(port_, request)
    }

    #[wasm_bindgen]
    pub fn wire_assets(port_: MessagePort, request: Box<[u8]>) {
        wire_assets_impl(port_, request)
    }

    #[wasm_bindgen]
    pub fn wire_chain_assets(port_: MessagePort, request: Box<[u8]>) {
        wire_chain_assets_impl(port_, request)
    }

    #[wasm_bindgen]
    pub fn wire_assets_import(port_: MessagePort, request: Box<[u8]>) {
        wire_assets_import_impl(port_, request)
    }

    #[wasm_bindgen]
    pub fn wire_quote_spend(port_: MessagePort, request: Box<[u8]>) {
        wire_quote_spend_impl(port_, request)
    }

    #[wasm_bindgen]
    pub fn wire_summary_spend(port_: MessagePort, request: Box<[u8]>) {
        wire_summary_spend_impl(port_, request)
    }

    #[wasm_bindgen]
    pub fn wire_create_spend(port_: MessagePort, request: Box<[u8]>) {
        wire_create_spend_impl(port_, request)
    }

    #[wasm_bindgen]
    pub fn wire_send_spend(port_: MessagePort, request: Box<[u8]>) {
        wire_send_spend_impl(port_, request)
    }

    #[wasm_bindgen]
    pub fn wire_send_spend_with_grpc(port_: MessagePort, request: Box<[u8]>) {
        wire_send_spend_with_grpc_impl(port_, request)
    }

    #[wasm_bindgen]
    pub fn wire_find_spend(port_: MessagePort, request: Box<[u8]>) {
        wire_find_spend_impl(port_, request)
    }

    #[wasm_bindgen]
    pub fn wire_find_all_spend(port_: MessagePort) {
        wire_find_all_spend_impl(port_)
    }

    #[wasm_bindgen]
    pub fn wire_find_one_spend(port_: MessagePort, request: Box<[u8]>) {
        wire_find_one_spend_impl(port_, request)
    }

    #[wasm_bindgen]
    pub fn wire_spend_find_by_id(port_: MessagePort, request: Box<[u8]>) {
        wire_spend_find_by_id_impl(port_, request)
    }

    #[wasm_bindgen]
    pub fn wire_count_spend(port_: MessagePort, request: Box<[u8]>) {
        wire_count_spend_impl(port_, request)
    }

    #[wasm_bindgen]
    pub fn wire_count_all_spend(port_: MessagePort) {
        wire_count_all_spend_impl(port_)
    }

    #[wasm_bindgen]
    pub fn wire_spend_update(port_: MessagePort, request: Box<[u8]>) {
        wire_spend_update_impl(port_, request)
    }

    #[wasm_bindgen]
    pub fn wire_spend_update_batch(port_: MessagePort, request: Box<[u8]>) {
        wire_spend_update_batch_impl(port_, request)
    }

    #[wasm_bindgen]
    pub fn wire_spend_update_by_filter(port_: MessagePort, request: Box<[u8]>) {
        wire_spend_update_by_filter_impl(port_, request)
    }

    #[wasm_bindgen]
    pub fn wire_spend_update_all(port_: MessagePort, request: Box<[u8]>) {
        wire_spend_update_all_impl(port_, request)
    }

    #[wasm_bindgen]
    pub fn wire_spend_delete(port_: MessagePort, request: Box<[u8]>) {
        wire_spend_delete_impl(port_, request)
    }

    #[wasm_bindgen]
    pub fn wire_spend_delete_batch(port_: MessagePort, request: Box<[u8]>) {
        wire_spend_delete_batch_impl(port_, request)
    }

    #[wasm_bindgen]
    pub fn wire_spend_delete_by_filter(port_: MessagePort, request: Box<[u8]>) {
        wire_spend_delete_by_filter_impl(port_, request)
    }

    #[wasm_bindgen]
    pub fn wire_spend_delete_all(port_: MessagePort) {
        wire_spend_delete_all_impl(port_)
    }

    #[wasm_bindgen]
    pub fn wire_chain_synced_block(port_: MessagePort, request: Box<[u8]>) {
        wire_chain_synced_block_impl(port_, request)
    }

    #[wasm_bindgen]
    pub fn wire_contract_synced_block(port_: MessagePort, request: Box<[u8]>) {
        wire_contract_synced_block_impl(port_, request)
    }

    #[wasm_bindgen]
    pub fn wire_status(port_: MessagePort, request: Box<[u8]>) {
        wire_status_impl(port_, request)
    }

    #[wasm_bindgen]
    pub fn wire_synchronizer_sync(port_: MessagePort, request: Box<[u8]>) {
        wire_synchronizer_sync_impl(port_, request)
    }

    #[wasm_bindgen]
    pub fn wire_synchronizer_reset(port_: MessagePort, request: Box<[u8]>) {
        wire_synchronizer_reset_impl(port_, request)
    }

    #[wasm_bindgen]
    pub fn wire_create_wallet(port_: MessagePort, request: Box<[u8]>) {
        wire_create_wallet_impl(port_, request)
    }

    #[wasm_bindgen]
    pub fn wire_check_current(port_: MessagePort) {
        wire_check_current_impl(port_)
    }

    #[wasm_bindgen]
    pub fn wire_check_password(port_: MessagePort, request: Box<[u8]>) {
        wire_check_password_impl(port_, request)
    }

    #[wasm_bindgen]
    pub fn wire_update_password(port_: MessagePort, request: Box<[u8]>) {
        wire_update_password_impl(port_, request)
    }

    #[wasm_bindgen]
    pub fn wire_export_mnemonic_phrase(port_: MessagePort, request: Box<[u8]>) {
        wire_export_mnemonic_phrase_impl(port_, request)
    }

    // Section: allocate functions

    // Section: related functions

    // Section: impl Wire2Api

    impl Wire2Api<Vec<u8>> for Box<[u8]> {
        fn wire2api(self) -> Vec<u8> {
            self.into_vec()
        }
    }
    // Section: impl Wire2Api for JsValue

    impl<T> Wire2Api<Option<T>> for JsValue
    where
        JsValue: Wire2Api<T>,
    {
        fn wire2api(self) -> Option<T> {
            (!self.is_null() && !self.is_undefined()).then(|| self.wire2api())
        }
    }
    impl Wire2Api<u8> for JsValue {
        fn wire2api(self) -> u8 {
            self.unchecked_into_f64() as _
        }
    }
    impl Wire2Api<Vec<u8>> for JsValue {
        fn wire2api(self) -> Vec<u8> {
            self.unchecked_into::<js_sys::Uint8Array>().to_vec().into()
        }
    }
}
#[cfg(target_family = "wasm")]
pub use self::web::*;

#[cfg(not(target_family = "wasm"))]
mod io {
    use super::*;
    // Section: wire functions

    #[no_mangle]
    pub extern "C" fn wire_initialize(port_: i64, options: *mut wire_uint_8_list) {
        wire_initialize_impl(port_, options)
    }

    #[no_mangle]
    pub extern "C" fn wire_is_initialized(port_: i64) {
        wire_is_initialized_impl(port_)
    }

    #[no_mangle]
    pub extern "C" fn wire_destroy(port_: i64) {
        wire_destroy_impl(port_)
    }

    #[no_mangle]
    pub extern "C" fn wire_get_config(port_: i64) {
        wire_get_config_impl(port_)
    }

    #[no_mangle]
    pub extern "C" fn wire_find_default_circuit(port_: i64, request: *mut wire_uint_8_list) {
        wire_find_default_circuit_impl(port_, request)
    }

    #[no_mangle]
    pub extern "C" fn wire_find_circuit(port_: i64, request: *mut wire_uint_8_list) {
        wire_find_circuit_impl(port_, request)
    }

    #[no_mangle]
    pub extern "C" fn wire_find_chain(port_: i64, request: *mut wire_uint_8_list) {
        wire_find_chain_impl(port_, request)
    }

    #[no_mangle]
    pub extern "C" fn wire_find_peer_chains(port_: i64, request: *mut wire_uint_8_list) {
        wire_find_peer_chains_impl(port_, request)
    }

    #[no_mangle]
    pub extern "C" fn wire_find_asset_symbols(port_: i64, request: *mut wire_uint_8_list) {
        wire_find_asset_symbols_impl(port_, request)
    }

    #[no_mangle]
    pub extern "C" fn wire_find_bridge(port_: i64, request: *mut wire_uint_8_list) {
        wire_find_bridge_impl(port_, request)
    }

    #[no_mangle]
    pub extern "C" fn wire_find_bridges(port_: i64, request: *mut wire_uint_8_list) {
        wire_find_bridges_impl(port_, request)
    }

    #[no_mangle]
    pub extern "C" fn wire_find_deposit_contract(port_: i64, request: *mut wire_uint_8_list) {
        wire_find_deposit_contract_impl(port_, request)
    }

    #[no_mangle]
    pub extern "C" fn wire_find_deposit_contract_by_address(
        port_: i64,
        request: *mut wire_uint_8_list,
    ) {
        wire_find_deposit_contract_by_address_impl(port_, request)
    }

    #[no_mangle]
    pub extern "C" fn wire_find_pool_contract(port_: i64, request: *mut wire_uint_8_list) {
        wire_find_pool_contract_impl(port_, request)
    }

    #[no_mangle]
    pub extern "C" fn wire_find_pool_contracts(port_: i64, request: *mut wire_uint_8_list) {
        wire_find_pool_contracts_impl(port_, request)
    }

    #[no_mangle]
    pub extern "C" fn wire_find_pool_contract_by_address(
        port_: i64,
        request: *mut wire_uint_8_list,
    ) {
        wire_find_pool_contract_by_address_impl(port_, request)
    }

    #[no_mangle]
    pub extern "C" fn wire_find_contract_by_address(port_: i64, request: *mut wire_uint_8_list) {
        wire_find_contract_by_address_impl(port_, request)
    }

    #[no_mangle]
    pub extern "C" fn wire_get_transaction_url(port_: i64, request: *mut wire_uint_8_list) {
        wire_get_transaction_url_impl(port_, request)
    }

    #[no_mangle]
    pub extern "C" fn wire_supported_asset_symbols(port_: i64, request: *mut wire_uint_8_list) {
        wire_supported_asset_symbols_impl(port_, request)
    }

    #[no_mangle]
    pub extern "C" fn wire_create_account(port_: i64, request: *mut wire_uint_8_list) {
        wire_create_account_impl(port_, request)
    }

    #[no_mangle]
    pub extern "C" fn wire_count(port_: i64, request: *mut wire_uint_8_list) {
        wire_count_impl(port_, request)
    }

    #[no_mangle]
    pub extern "C" fn wire_count_all(port_: i64) {
        wire_count_all_impl(port_)
    }

    #[no_mangle]
    pub extern "C" fn wire_find(port_: i64, request: *mut wire_uint_8_list) {
        wire_find_impl(port_, request)
    }

    #[no_mangle]
    pub extern "C" fn wire_find_by_id(port_: i64, request: *mut wire_uint_8_list) {
        wire_find_by_id_impl(port_, request)
    }

    #[no_mangle]
    pub extern "C" fn wire_find_by_shielded_address(port_: i64, request: *mut wire_uint_8_list) {
        wire_find_by_shielded_address_impl(port_, request)
    }

    #[no_mangle]
    pub extern "C" fn wire_find_by_public_key(port_: i64, request: *mut wire_uint_8_list) {
        wire_find_by_public_key_impl(port_, request)
    }

    #[no_mangle]
    pub extern "C" fn wire_update_by_id(port_: i64, request: *mut wire_uint_8_list) {
        wire_update_by_id_impl(port_, request)
    }

    #[no_mangle]
    pub extern "C" fn wire_update_by_shielded_address(port_: i64, request: *mut wire_uint_8_list) {
        wire_update_by_shielded_address_impl(port_, request)
    }

    #[no_mangle]
    pub extern "C" fn wire_update_by_public_key(port_: i64, request: *mut wire_uint_8_list) {
        wire_update_by_public_key_impl(port_, request)
    }

    #[no_mangle]
    pub extern "C" fn wire_update_encryption(port_: i64, request: *mut wire_uint_8_list) {
        wire_update_encryption_impl(port_, request)
    }

    #[no_mangle]
    pub extern "C" fn wire_export_secret_key_by_id(port_: i64, request: *mut wire_uint_8_list) {
        wire_export_secret_key_by_id_impl(port_, request)
    }

    #[no_mangle]
    pub extern "C" fn wire_export_secret_key_by_shielded_address(
        port_: i64,
        request: *mut wire_uint_8_list,
    ) {
        wire_export_secret_key_by_shielded_address_impl(port_, request)
    }

    #[no_mangle]
    pub extern "C" fn wire_export_secret_key_by_public_key(
        port_: i64,
        request: *mut wire_uint_8_list,
    ) {
        wire_export_secret_key_by_public_key_impl(port_, request)
    }

    #[no_mangle]
    pub extern "C" fn wire_quote_deposit(port_: i64, request: *mut wire_uint_8_list) {
        wire_quote_deposit_impl(port_, request)
    }

    #[no_mangle]
    pub extern "C" fn wire_summary_deposit(port_: i64, request: *mut wire_uint_8_list) {
        wire_summary_deposit_impl(port_, request)
    }

    #[no_mangle]
    pub extern "C" fn wire_create_deposit(port_: i64, request: *mut wire_uint_8_list) {
        wire_create_deposit_impl(port_, request)
    }

    #[no_mangle]
    pub extern "C" fn wire_send_deposit(port_: i64, request: *mut wire_uint_8_list) {
        wire_send_deposit_impl(port_, request)
    }

    #[no_mangle]
    pub extern "C" fn wire_send_deposit_with_grpc(port_: i64, request: *mut wire_uint_8_list) {
        wire_send_deposit_with_grpc_impl(port_, request)
    }

    #[no_mangle]
    pub extern "C" fn wire_find_deposit(port_: i64, request: *mut wire_uint_8_list) {
        wire_find_deposit_impl(port_, request)
    }

    #[no_mangle]
    pub extern "C" fn wire_find_all_deposit(port_: i64) {
        wire_find_all_deposit_impl(port_)
    }

    #[no_mangle]
    pub extern "C" fn wire_find_one_deposit(port_: i64, request: *mut wire_uint_8_list) {
        wire_find_one_deposit_impl(port_, request)
    }

    #[no_mangle]
    pub extern "C" fn wire_deposit_find_by_id(port_: i64, request: *mut wire_uint_8_list) {
        wire_deposit_find_by_id_impl(port_, request)
    }

    #[no_mangle]
    pub extern "C" fn wire_count_deposit(port_: i64, request: *mut wire_uint_8_list) {
        wire_count_deposit_impl(port_, request)
    }

    #[no_mangle]
    pub extern "C" fn wire_count_all_deposit(port_: i64) {
        wire_count_all_deposit_impl(port_)
    }

    #[no_mangle]
    pub extern "C" fn wire_deposit_update(port_: i64, request: *mut wire_uint_8_list) {
        wire_deposit_update_impl(port_, request)
    }

    #[no_mangle]
    pub extern "C" fn wire_deposit_update_batch(port_: i64, request: *mut wire_uint_8_list) {
        wire_deposit_update_batch_impl(port_, request)
    }

    #[no_mangle]
    pub extern "C" fn wire_deposit_update_by_filter(port_: i64, request: *mut wire_uint_8_list) {
        wire_deposit_update_by_filter_impl(port_, request)
    }

    #[no_mangle]
    pub extern "C" fn wire_deposit_update_all(port_: i64, request: *mut wire_uint_8_list) {
        wire_deposit_update_all_impl(port_, request)
    }

    #[no_mangle]
    pub extern "C" fn wire_deposit_delete(port_: i64, request: *mut wire_uint_8_list) {
        wire_deposit_delete_impl(port_, request)
    }

    #[no_mangle]
    pub extern "C" fn wire_deposit_delete_batch(port_: i64, request: *mut wire_uint_8_list) {
        wire_deposit_delete_batch_impl(port_, request)
    }

    #[no_mangle]
    pub extern "C" fn wire_deposit_delete_by_filter(port_: i64, request: *mut wire_uint_8_list) {
        wire_deposit_delete_by_filter_impl(port_, request)
    }

    #[no_mangle]
    pub extern "C" fn wire_deposit_delete_all(port_: i64) {
        wire_deposit_delete_all_impl(port_)
    }

    #[no_mangle]
    pub extern "C" fn wire_scanner_scan(port_: i64, request: *mut wire_uint_8_list) {
        wire_scanner_scan_impl(port_, request)
    }

    #[no_mangle]
    pub extern "C" fn wire_scanner_reset(port_: i64, request: *mut wire_uint_8_list) {
        wire_scanner_reset_impl(port_, request)
    }

    #[no_mangle]
    pub extern "C" fn wire_balance(port_: i64, request: *mut wire_uint_8_list) {
        wire_balance_impl(port_, request)
    }

    #[no_mangle]
    pub extern "C" fn wire_assets(port_: i64, request: *mut wire_uint_8_list) {
        wire_assets_impl(port_, request)
    }

    #[no_mangle]
    pub extern "C" fn wire_chain_assets(port_: i64, request: *mut wire_uint_8_list) {
        wire_chain_assets_impl(port_, request)
    }

    #[no_mangle]
    pub extern "C" fn wire_assets_import(port_: i64, request: *mut wire_uint_8_list) {
        wire_assets_import_impl(port_, request)
    }

    #[no_mangle]
    pub extern "C" fn wire_quote_spend(port_: i64, request: *mut wire_uint_8_list) {
        wire_quote_spend_impl(port_, request)
    }

    #[no_mangle]
    pub extern "C" fn wire_summary_spend(port_: i64, request: *mut wire_uint_8_list) {
        wire_summary_spend_impl(port_, request)
    }

    #[no_mangle]
    pub extern "C" fn wire_create_spend(port_: i64, request: *mut wire_uint_8_list) {
        wire_create_spend_impl(port_, request)
    }

    #[no_mangle]
    pub extern "C" fn wire_send_spend(port_: i64, request: *mut wire_uint_8_list) {
        wire_send_spend_impl(port_, request)
    }

    #[no_mangle]
    pub extern "C" fn wire_send_spend_with_grpc(port_: i64, request: *mut wire_uint_8_list) {
        wire_send_spend_with_grpc_impl(port_, request)
    }

    #[no_mangle]
    pub extern "C" fn wire_find_spend(port_: i64, request: *mut wire_uint_8_list) {
        wire_find_spend_impl(port_, request)
    }

    #[no_mangle]
    pub extern "C" fn wire_find_all_spend(port_: i64) {
        wire_find_all_spend_impl(port_)
    }

    #[no_mangle]
    pub extern "C" fn wire_find_one_spend(port_: i64, request: *mut wire_uint_8_list) {
        wire_find_one_spend_impl(port_, request)
    }

    #[no_mangle]
    pub extern "C" fn wire_spend_find_by_id(port_: i64, request: *mut wire_uint_8_list) {
        wire_spend_find_by_id_impl(port_, request)
    }

    #[no_mangle]
    pub extern "C" fn wire_count_spend(port_: i64, request: *mut wire_uint_8_list) {
        wire_count_spend_impl(port_, request)
    }

    #[no_mangle]
    pub extern "C" fn wire_count_all_spend(port_: i64) {
        wire_count_all_spend_impl(port_)
    }

    #[no_mangle]
    pub extern "C" fn wire_spend_update(port_: i64, request: *mut wire_uint_8_list) {
        wire_spend_update_impl(port_, request)
    }

    #[no_mangle]
    pub extern "C" fn wire_spend_update_batch(port_: i64, request: *mut wire_uint_8_list) {
        wire_spend_update_batch_impl(port_, request)
    }

    #[no_mangle]
    pub extern "C" fn wire_spend_update_by_filter(port_: i64, request: *mut wire_uint_8_list) {
        wire_spend_update_by_filter_impl(port_, request)
    }

    #[no_mangle]
    pub extern "C" fn wire_spend_update_all(port_: i64, request: *mut wire_uint_8_list) {
        wire_spend_update_all_impl(port_, request)
    }

    #[no_mangle]
    pub extern "C" fn wire_spend_delete(port_: i64, request: *mut wire_uint_8_list) {
        wire_spend_delete_impl(port_, request)
    }

    #[no_mangle]
    pub extern "C" fn wire_spend_delete_batch(port_: i64, request: *mut wire_uint_8_list) {
        wire_spend_delete_batch_impl(port_, request)
    }

    #[no_mangle]
    pub extern "C" fn wire_spend_delete_by_filter(port_: i64, request: *mut wire_uint_8_list) {
        wire_spend_delete_by_filter_impl(port_, request)
    }

    #[no_mangle]
    pub extern "C" fn wire_spend_delete_all(port_: i64) {
        wire_spend_delete_all_impl(port_)
    }

    #[no_mangle]
    pub extern "C" fn wire_chain_synced_block(port_: i64, request: *mut wire_uint_8_list) {
        wire_chain_synced_block_impl(port_, request)
    }

    #[no_mangle]
    pub extern "C" fn wire_contract_synced_block(port_: i64, request: *mut wire_uint_8_list) {
        wire_contract_synced_block_impl(port_, request)
    }

    #[no_mangle]
    pub extern "C" fn wire_status(port_: i64, request: *mut wire_uint_8_list) {
        wire_status_impl(port_, request)
    }

    #[no_mangle]
    pub extern "C" fn wire_synchronizer_sync(port_: i64, request: *mut wire_uint_8_list) {
        wire_synchronizer_sync_impl(port_, request)
    }

    #[no_mangle]
    pub extern "C" fn wire_synchronizer_reset(port_: i64, request: *mut wire_uint_8_list) {
        wire_synchronizer_reset_impl(port_, request)
    }

    #[no_mangle]
    pub extern "C" fn wire_create_wallet(port_: i64, request: *mut wire_uint_8_list) {
        wire_create_wallet_impl(port_, request)
    }

    #[no_mangle]
    pub extern "C" fn wire_check_current(port_: i64) {
        wire_check_current_impl(port_)
    }

    #[no_mangle]
    pub extern "C" fn wire_check_password(port_: i64, request: *mut wire_uint_8_list) {
        wire_check_password_impl(port_, request)
    }

    #[no_mangle]
    pub extern "C" fn wire_update_password(port_: i64, request: *mut wire_uint_8_list) {
        wire_update_password_impl(port_, request)
    }

    #[no_mangle]
    pub extern "C" fn wire_export_mnemonic_phrase(port_: i64, request: *mut wire_uint_8_list) {
        wire_export_mnemonic_phrase_impl(port_, request)
    }

    // Section: allocate functions

    #[no_mangle]
    pub extern "C" fn new_uint_8_list_0(len: i32) -> *mut wire_uint_8_list {
        let ans = wire_uint_8_list {
            ptr: support::new_leak_vec_ptr(Default::default(), len),
            len,
        };
        support::new_leak_box_ptr(ans)
    }

    // Section: related functions

    // Section: impl Wire2Api

    impl Wire2Api<Vec<u8>> for *mut wire_uint_8_list {
        fn wire2api(self) -> Vec<u8> {
            unsafe {
                let wrap = support::box_from_leak_ptr(self);
                support::vec_from_leak_ptr(wrap.ptr, wrap.len)
            }
        }
    }
    // Section: wire structs

    #[repr(C)]
    #[derive(Clone)]
    pub struct wire_uint_8_list {
        ptr: *mut u8,
        len: i32,
    }

    // Section: impl NewWithNullPtr

    pub trait NewWithNullPtr {
        fn new_with_null_ptr() -> Self;
    }

    impl<T> NewWithNullPtr for *mut T {
        fn new_with_null_ptr() -> Self {
            std::ptr::null_mut()
        }
    }

    // Section: sync execution mode utility

    #[no_mangle]
    pub extern "C" fn free_WireSyncReturn(ptr: support::WireSyncReturn) {
        unsafe {
            let _ = support::box_from_leak_ptr(ptr);
        };
    }
}
#[cfg(not(target_family = "wasm"))]
pub use self::io::*;
